// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository_DAL_;

#nullable disable

namespace Repository_DAL_.Migrations
{
    [DbContext(typeof(EFContext))]
    [Migration("20241010052702_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Repository_DAL_.Model.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("address_lane")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("address_type")
                        .HasColumnType("integer");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("landmark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("pincode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("address");
                });

            modelBuilder.Entity("Repository_DAL_.Model.ApiLog", b =>
                {
                    b.Property<int>("srl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("srl"));

                    b.Property<DateTime>("datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("exception")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("log")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("log_origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("srl");

                    b.ToTable("apilog");
                });

            modelBuilder.Entity("Repository_DAL_.Model.Category", b =>
                {
                    b.Property<int>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("category_id"));

                    b.Property<string>("categoryname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("image_srl")
                        .HasColumnType("integer");

                    b.Property<DateTime>("modifieddate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("category_id");

                    b.HasIndex("image_srl");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Repository_DAL_.Model.ControlMaster", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("defaultsearchimg")
                        .HasColumnType("integer");

                    b.Property<string>("devUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("gmapkey")
                        .HasColumnType("text");

                    b.Property<DateTime>("modifieddate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("prodUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("controlmaster");
                });

            modelBuilder.Entity("Repository_DAL_.Model.Image", b =>
                {
                    b.Property<int>("image_srl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("image_srl"));

                    b.Property<DateTime>("createdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("image_description")
                        .HasColumnType("text");

                    b.Property<string>("image_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("iscarousel")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("modifieddate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("image_srl");

                    b.ToTable("images");
                });

            modelBuilder.Entity("Repository_DAL_.Model.Label", b =>
                {
                    b.Property<int>("label_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("label_id"));

                    b.Property<DateTime>("createdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("label_description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("labeld")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("modifieddate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("label_id");

                    b.ToTable("labels");
                });

            modelBuilder.Entity("Repository_DAL_.Model.Orders", b =>
                {
                    b.Property<int>("srl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("srl"));

                    b.Property<double>("amountpaid")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("cancellendate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<string>("order_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("reservation_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("reservationsrl")
                        .HasColumnType("integer");

                    b.HasKey("srl");

                    b.HasIndex("reservationsrl");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Repository_DAL_.Model.Product", b =>
                {
                    b.Property<int>("product_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("product_id"));

                    b.Property<int>("category_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("image_srl")
                        .HasColumnType("integer");

                    b.Property<bool>("isbestseller")
                        .HasColumnType("boolean");

                    b.Property<bool>("isfeatured")
                        .HasColumnType("boolean");

                    b.Property<bool>("isveg")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("modifieddate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("price")
                        .HasColumnType("integer");

                    b.Property<string>("product_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("rating")
                        .HasColumnType("double precision");

                    b.Property<int>("ratingcount")
                        .HasColumnType("integer");

                    b.Property<int>("stockcount")
                        .HasColumnType("integer");

                    b.HasKey("product_id");

                    b.HasIndex("category_id");

                    b.HasIndex("image_srl");

                    b.ToTable("products");
                });

            modelBuilder.Entity("Repository_DAL_.Model.Reservation", b =>
                {
                    b.Property<int>("srl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("srl"));

                    b.Property<string>("cart")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("cartprice")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("confirmedtime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("createdtime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("expiretime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<bool>("isexpired")
                        .HasColumnType("boolean");

                    b.Property<string>("reservation_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("srl");

                    b.ToTable("reservations");
                });

            modelBuilder.Entity("Repository_DAL_.Model.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("cart")
                        .HasColumnType("text");

                    b.Property<DateOnly>("createdate")
                        .HasColumnType("date");

                    b.Property<string>("e_mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("modifieddate")
                        .HasColumnType("date");

                    b.Property<string>("pwd")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("refreshtoken")
                        .HasColumnType("text");

                    b.Property<string>("usr_nam")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Repository_DAL_.Model.Category", b =>
                {
                    b.HasOne("Repository_DAL_.Model.Image", "image")
                        .WithMany()
                        .HasForeignKey("image_srl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("image");
                });

            modelBuilder.Entity("Repository_DAL_.Model.Orders", b =>
                {
                    b.HasOne("Repository_DAL_.Model.Reservation", "reservation")
                        .WithMany()
                        .HasForeignKey("reservationsrl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("reservation");
                });

            modelBuilder.Entity("Repository_DAL_.Model.Product", b =>
                {
                    b.HasOne("Repository_DAL_.Model.Category", "category")
                        .WithMany("products")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository_DAL_.Model.Image", "image")
                        .WithMany()
                        .HasForeignKey("image_srl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("image");
                });

            modelBuilder.Entity("Repository_DAL_.Model.Category", b =>
                {
                    b.Navigation("products");
                });
#pragma warning restore 612, 618
        }
    }
}
